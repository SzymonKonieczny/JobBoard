@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
        <li class="nav-item">
            <a id="manage" class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">
                Hello @{
                    // Retrieve the user's ID from the ClaimsPrincipal
                    var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);

                    // Use the UserManager to find the user by ID
                    var user = await UserManager.FindByIdAsync(userId);

                    // If the user is found, you can cast it to your custom UserIdentity class
                    if (user != null)
                    {
                        var userIdentity = (IdentityUser)user;
                        <a>@user.UserName</a>
                        // Now you have access to properties and methods of the UserIdentity object
                    }
            }
        !</a>
    </li>
    <li class="nav-item">
        <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
            <button id="logout" type="submit" class="nav-link btn btn-link text-dark border-0">Logout</button>
        </form>
    </li>
}
else
{
    <li class="nav-item">
        <a class="nav-link text-dark" id="register" asp-area="Identity" asp-page="/Account/Register">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" id="login" asp-area="Identity" asp-page="/Account/Login">Login</a>
    </li>
}
</ul>